#Anti-Malware using Machine Learning

# Importing the libraries
import pandas as pd
import numpy as np
import pickle
import sklearn.ensemble as ske
#from sklearn import cross_validation
#import sklearn.externals.joblib as extjoblib
import joblib
from sklearn import tree, linear_model
from sklearn.model_selection import train_test_split
from sklearn.feature_selection import SelectFromModel
#from sklearn.externals import joblib
from sklearn.metrics import confusion_matrix

from tkinter import * 
import tkinter as tk
from tkinter import filedialog
from tkinter import messagebox
from tkinter.ttk import Progressbar
from tkinter import filedialog

import os
import time



def startLearning():


    progress=Progressbar(win,orient=HORIZONTAL,length=250, mode='determinate')
    progress.grid(row=0,sticky="N",padx=90,pady=420)
    # Importing the dataset
    data = pd.read_csv('data.csv', sep='|')
    X = data.drop(['Name', 'md5', 'legitimate'], axis=1).values
    y = data['legitimate'].values

    #open file to save
    logFile=open("Results.txt","w")
    logFile.write("Researching important feature based on "+str(X.shape[1])+" total features")

    progress['value']=10
    win.update_idletasks()
    time.sleep(1)

    print('Researching important feature based on %i total features\n' % X.shape[1])

    # Feature selection using Trees Classifier
    fsel = ske.ExtraTreesClassifier().fit(X, y)
    model = SelectFromModel(fsel, prefit=True)
    X_new = model.transform(X)
    nb_features = X_new.shape[1]


    temp=20

    # Splitting the dataset into the Training set and Test set
    X_train, X_test, y_train, y_test = train_test_split(X_new, y ,test_size=0.2)

    features = []

    print('%i features identified as important:' % nb_features)
    logFile.write("\n features identified as important: "+str(nb_features))

    progress['value']=20
    win.update_idletasks()
    time.sleep(1)

    win.update()

    indices = np.argsort(fsel.feature_importances_)[::-1][:nb_features]
    for f in range(nb_features):
        print("%d. feature %s (%f)" % (f + 1, data.columns[2+indices[f]], fsel.feature_importances_[indices[f]]))
        logFile.write("\n feature "+str(f + 1)+" "+str(data.columns[2+indices[f]])+" "+str(fsel.feature_importances_[indices[f]]))
        
        progress['value']=temp=temp+2
        win.update_idletasks()
        time.sleep(1)
        win.update()

    progress['value']=50
    win.update_idletasks()
    time.sleep(1)

    win.update()
    # Take care of the feature order
    for f in sorted(np.argsort(fsel.feature_importances_)[::-1][:nb_features]):
        features.append(data.columns[2+f])

    #Algorithm comparison
    algorithms = {
            "DecisionTree": tree.DecisionTreeClassifier(max_depth=10),
            "RandomForest": ske.RandomForestClassifier(n_estimators=50),
        }

    results = {}
    print("\nNow testing algorithms")
    logFile.write("\nNow testing algorithms")

    progress['value']=70
    win.update_idletasks()
    time.sleep(1)

    win.update()
    # Fitting Classification algorithms to the Training set
    for algo in algorithms:
        clf = algorithms[algo]
        clf.fit(X_train, y_train)
        score = clf.score(X_test, y_test)
        print("%s : %f %%" % (algo, score*100))
        logFile.write(str(algo)+" "+str(float("{:.5f}".format(score*100))))
        results[algo] = score

    winner = max(results, key=results.get)
    f=float("{:.5f}".format(results[winner]*100))
    res="\nWinner algorithm is "+str(winner)+" with a "+str(f)+"% accuracy" 

    logFile.write(res)
    print(res)

    progress['value']=90
    win.update_idletasks()
    time.sleep(1)

    win.update()

    # Save the algorithm and the feature list for later predictions
    print('Saving algorithm and feature list in classifier directory...')
    logFile.write("\nSaving algorithm and feature list in classifier directory...")

    joblib.dump(algorithms[winner], 'classifier/classifier.pkl')
    open('classifier/features.pkl', 'wb').write(pickle.dumps(features))

    print('Saved')
    logFile.write("\nSaved successfully")

    # Predicting the Test set results
    y_pred = clf.predict(X_test)

    # Making the Confusion Matrix
    from sklearn.metrics import confusion_matrix
    cm = confusion_matrix(y_test, y_pred)

    progress['value']=100

    msgBox=tk.messagebox.showinfo("Success!!", res+"\n Details saved in log file Results.txt", icon="info")

    progress.grid(pady=1000)


def checkPE():

    filePath=filedialog.askopenfilename(filetypes=(("All Files", "*.exe"),("File","*.exe")))
    
    progress=Progressbar(win,orient=HORIZONTAL,length=250, mode='determinate')
    progress.grid(row=0,sticky="N",padx=90,pady=420)

    progress['value']=30
    win.update_idletasks()
    time.sleep(1)


    fileName=""
    for c in reversed(filePath):
        if c == '/': 
            break
        else :
            fileName=fileName+c

    fileName=fileName[::-1]

    progress['value']=80
    win.update_idletasks()
    time.sleep(1)

    win.update()

    os.system("python checkpe.py "+fileName)

    progress.grid(pady=1000)


def aboutWindow():

    newWin=Tk()
    newWin.title("About us")
    newWin.geometry("520x300")
    newWin.configure(bg="black")

    title=Label(newWin,font=("Berlin Sans FB",25),bg="black",fg="white")
    title.grid(row=0,sticky="N",padx=60,pady=35)
    title.config(text="Malware detector using ML")

    content=Label(newWin,font=("Berlin Sans FB",17),bg="black",fg="white")
    content.config(text="This project was developed by : \n\n ABIJITH V (18BCA0073)\n MOHAMMED TALHA (18BCA0107)\n ALI MOHAMMED (18BCA0100)")
    content.grid(row=0,sticky="N",padx=60,pady=70)

def on_enter_submit(e):
    submit["background"]="aquamarine"

def on_leave_submit(e):
    submit["background"]="lime"

def on_enter_about(e):
    about["background"]="aquamarine"

def on_leave_about(e):
    about["background"]="lime"

def on_enter_checkPE(e):
    checkPE["background"]="aquamarine"

def on_leave_checkPE(e):
    checkPE["background"]="lime"


win = Tk();

win.geometry("480x500") 
win.configure(bg="black")
win.title("Malware detector")

title=Label(win,font=("Berlin Sans FB",30),bg="black",fg="white")
title.grid(row=0,sticky="N",padx=90,pady=75)
title.config(text="Malware detector")

submit=Button(win, font=("Berlin Sans FB",15),bg="lime",fg="black",
    text="Start feature selection", command=startLearning)
submit.grid(row=0,sticky="N",padx=90,pady=200)
submit.config(height=2, width=20)

checkPE=Button(win, font=("Berlin Sans FB",15),bg="lime",fg="black", 
    text="Test a file", command=checkPE)
checkPE.grid(row=0,sticky="N",padx=90,pady=275)
checkPE.config(height=2, width=20)

about=Button(win, font=("Berlin Sans FB",10),bg="lime",fg="black", text="i", command=aboutWindow)
about.place(x=10,y=10)
about.config(height=1, width=2, borderwidth=0)

submit.bind("<Enter>", on_enter_submit)
submit.bind("<Leave>", on_leave_submit)

about.bind("<Enter>", on_enter_about)
about.bind("<Leave>", on_leave_about)

checkPE.bind("<Enter>", on_enter_checkPE)
checkPE.bind("<Leave>", on_leave_checkPE)

win.mainloop()
